<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Myonlyzzy Blog</title>
    <link>https://myonlyzzy.github.io/</link>
    <description>Recent content on Myonlyzzy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Oct 2018 14:56:29 +0800</lastBuildDate>
    
	<atom:link href="https://myonlyzzy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang unsafe.pointer解读</title>
      <link>https://myonlyzzy.github.io/post/golang-unsafepointer/</link>
      <pubDate>Sun, 07 Oct 2018 14:56:29 +0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/post/golang-unsafepointer/</guid>
      <description>简介 unsafe.pointer和uintptr是golang里面对指针操作两个非常重要的对象。那么unsafe.pinter 和uintptr到底有什么用的呢.
unsafe.pointer unsafe.pointer 可以表示任意类型的指针.
 i:=10 var f *float64 f:=&amp;amp;i  Cannot use &amp;lsquo;pi&amp;rsquo; (type *int) as type *float64 in assignment 上面这段代码肯定会报错对吧,因为你无法把一个int的指针赋值给float64的指针.</description>
    </item>
    
    <item>
      <title>http2解读</title>
      <link>https://myonlyzzy.github.io/post/http2grpc/</link>
      <pubDate>Thu, 07 Dec 2017 14:56:29 +0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/post/http2grpc/</guid>
      <description>http1.0&amp;amp;http1.1  http请求发送接收的过程  ​
​
 Http1.0 http1.1 存在的问题</description>
    </item>
    
    <item>
      <title>Docker Proxy</title>
      <link>https://myonlyzzy.github.io/post/docker-proxy/</link>
      <pubDate>Tue, 07 Nov 2017 14:56:29 +0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/post/docker-proxy/</guid>
      <description>配置docker 代理  前段时间由于要使用kubespray 部署一个k8s集群,但是kubespray使用的镜像都是gcr和quay的镜像被gfw屏蔽了,安装时pull不下来镜像.本来打算使用网易镜像中心有个哥们传上去的镜像但是版本很多不对,想了想还是自己搭个代理使用起来方便。
 申请一个aws的一年免费服务器 这个不用多说反正申请就好了,当然你得用信用卡,需要信用卡验证。
配置socks代理 我比较懒也懒得配置sockshadow。直接使用ssh直接在本地启个socks代理。</description>
    </item>
    
    <item>
      <title>istio</title>
      <link>https://myonlyzzy.github.io/post/istio/</link>
      <pubDate>Tue, 07 Nov 2017 14:56:29 +0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/post/istio/</guid>
      <description>istio简介 istio是2017年google ibm lyft 开源的一个service mesh 组件,主要为k8s提供service comunication。istio现在还没有发布正式的生产环境可用的版本,不过目前在github的提交非常快,按照这个速度2018年肯定可以发布第一个release版本出来。
istio 安装 istio安装需要k8s 1.</description>
    </item>
    
    <item>
      <title>kingshard代码分析</title>
      <link>https://myonlyzzy.github.io/post/kingshard/</link>
      <pubDate>Tue, 07 Nov 2017 14:56:29 +0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/post/kingshard/</guid>
      <description>&lt;p&gt;由于工作需要,需要分析一下kingshard代码,记录一下kingshard的一些代码实现&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang Net Http</title>
      <link>https://myonlyzzy.github.io/post/golang-net-http/</link>
      <pubDate>Wed, 25 Oct 2017 14:26:52 +0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/post/golang-net-http/</guid>
      <description>golang net/http包详解  net/http 包是进行web和网络编程经常用到的一个包。详细了解golang 标准库里的这个包会对提高网路编程技巧有帮助 * TCP编程
func main() { l, err := net.</description>
    </item>
    
    <item>
      <title>golang sync pood 分析</title>
      <link>https://myonlyzzy.github.io/post/golang-sync-pool/</link>
      <pubDate>Thu, 07 Sep 2017 14:56:29 +0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/post/golang-sync-pool/</guid>
      <description>golang sync/Pool 的使用  最近有个项目开发,由于涉及创建大量的goroutine,所以考虑到要不要使用goroutine池.但一直对goroutine池的必要性存有疑虑,是否需要使用goroutine Pool.但是无意间了解到一个项目fasthttp,据称被net/http快10倍。有人称fasthttp比net/http快10倍的原因是goroutine池的使用,我感觉不是goroutine池而是临时对象池对性能提升比较大。
 golang 官方对sync/pool 的介绍 官方的原话是这样说的.</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://myonlyzzy.github.io/about/</link>
      <pubDate>Fri, 07 Jul 2017 14:56:29 +0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/about/</guid>
      <description> About </description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://myonlyzzy.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://myonlyzzy.github.io/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>