<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on myonlyzzy blog</title>
    <link>https://myonlyzzy.github.io/tags/golang/</link>
    <description>Recent content in Golang on myonlyzzy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>myonlyzzy- All rights reserved</copyright>
    <lastBuildDate>Sat, 26 Jan 2019 15:20:27 +0800</lastBuildDate>
    
	<atom:link href="https://myonlyzzy.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux系统中进程的内存分配管理</title>
      <link>https://myonlyzzy.github.io/post/linux_process_memory/</link>
      <pubDate>Sat, 26 Jan 2019 15:20:27 +0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/post/linux_process_memory/</guid>
      <description> linux 系统下进程的内存管理  以前一直对进程的内存分配管理一知半解,最近因为一些事情需要了解一下.稍微研究了一下,记录一下.(以x86de 32位机器为例)
 虚拟地址空间 物理内存地址 </description>
    </item>
    
    <item>
      <title>k8s workqueue 解读</title>
      <link>https://myonlyzzy.github.io/post/k8s_workqueue/</link>
      <pubDate>Fri, 04 Jan 2019 22:14:31 -0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/post/k8s_workqueue/</guid>
      <description>最近在看k8s的代码.发现不管时kube-controller-manager还是kube-scheduler 中对client-go中的workqueque和informer的使用时频率最高的一部分.于是就花了点时间粗略的研究了一下k8s中的workqueue。
workqueue workqueque 定义在k8s.io/client-go/util/workqueue下.在它的doc.go 中关于这个包有如下的说明
// Package workqueue provides a simple queue that supports the following // features: // * Fair: items processed in the order in which they are added.</description>
    </item>
    
    <item>
      <title>golang unsafe pointer 解读</title>
      <link>https://myonlyzzy.github.io/post/golang_unsafe_pointer/</link>
      <pubDate>Mon, 26 Nov 2018 22:14:31 -0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/post/golang_unsafe_pointer/</guid>
      <description>简介 unsafe.pointer和uintptr是golang里面对指针操作两个非常重要的对象。那么unsafe.pinter 和uintptr到底有什么用的呢.
unsafe.pointer unsafe.pointer 可以表示任意类型的指针.
 i:=10 var f *float64 f:=&amp;amp;i  Cannot use &amp;lsquo;pi&amp;rsquo; (type *int) as type *float64 in assignment 上面这段代码肯定会报错对吧,因为你无法把一个int的指针赋值给float64的指针.</description>
    </item>
    
    <item>
      <title>golang sync cond 解读</title>
      <link>https://myonlyzzy.github.io/post/golang_sync_cond/</link>
      <pubDate>Tue, 20 Nov 2018 22:14:31 -0800</pubDate>
      
      <guid>https://myonlyzzy.github.io/post/golang_sync_cond/</guid>
      <description>简介 Cond 条件变量 Cond 实现一个条件变量，即等待或宣布事件发生的 goroutines 的会合点，它会保存一个通知列表。基本思想是当某中状态达成，goroutine 将会等待（Wait）在那里，当某个时刻状态改变时通过通知的方式（Broadcast，Signal）的方式通知等待的 goroutine。这样，不满足条件的 goroutine 唤醒继续向下执行，满足条件的重新进入等待序列.
exmaple var m sync.Mutex var c = sync.NewCond(&amp;amp;m) var n = 5 func syncCondtest(i int, running chan bool) { c.</description>
    </item>
    
  </channel>
</rss>